import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:campus_food_app/domain/entities/discount_entity.dart';
import 'package:campus_food_app/domain/repositories/discount_repository.dart';

part 'discount_event.dart';
part 'discount_state.dart';

class DiscountBloc extends Bloc<DiscountEvent, DiscountState> {
  final DiscountRepository discountRepository;

  DiscountBloc({required this.discountRepository}) : super(DiscountInitial()) {
    on<LoadDiscounts>(_onLoadDiscounts);
    on<AddDiscount>(_onAddDiscount);
    on<UpdateDiscount>(_onUpdateDiscount);
    on<DeleteDiscount>(_onDeleteDiscount);
    on<ToggleDiscountStatus>(_onToggleDiscountStatus);
  }

  Future<void> _onLoadDiscounts(
    LoadDiscounts event,
    Emitter<DiscountState> emit,
  ) async {
    emit(DiscountLoading());
    try {
      final discounts = await discountRepository.getDiscountsByVendor(event.vendorId);
      emit(DiscountLoaded(discounts: discounts));
    } catch (e) {
      emit(DiscountError(message: 'Failed to load discounts: ${e.toString()}'));
    }
  }

  Future<void> _onAddDiscount(
    AddDiscount event,
    Emitter<DiscountState> emit,
  ) async {
    emit(DiscountLoading());
    try {
      final newDiscount = DiscountEntity(
        discountId: '', // Will be generated by repository
        vendorId: event.vendorId,
        type: event.type,
        value: event.value,
        description: event.description,
        startDate: event.startDate,
        endDate: event.endDate,
        minOrderAmount: event.minOrderAmount,
        isActive: true,
      );

      await discountRepository.createDiscount(newDiscount);
      
      // Reload discounts
      final discounts = await discountRepository.getDiscountsByVendor(event.vendorId);
      emit(DiscountLoaded(discounts: discounts));
    } catch (e) {
      emit(DiscountError(message: 'Failed to add discount: ${e.toString()}'));
    }
  }

  Future<void> _onUpdateDiscount(
    UpdateDiscount event,
    Emitter<DiscountState> emit,
  ) async {
    emit(DiscountLoading());
    try {
      final existingDiscount = await discountRepository.getDiscountById(event.discountId);
      if (existingDiscount != null) {
        final updatedDiscount = DiscountEntity(
          discountId: event.discountId,
          vendorId: existingDiscount.vendorId,
          type: event.type,
          value: event.value,
          description: event.description,
          startDate: event.startDate,
          endDate: event.endDate,
          minOrderAmount: event.minOrderAmount,
          isActive: event.isActive,
        );

        await discountRepository.updateDiscount(updatedDiscount);
        
        // Reload discounts
        final discounts = await discountRepository.getDiscountsByVendor(existingDiscount.vendorId);
        emit(DiscountLoaded(discounts: discounts));
      } else {
        emit(DiscountError(message: 'Discount not found'));
      }
    } catch (e) {
      emit(DiscountError(message: 'Failed to update discount: ${e.toString()}'));
    }
  }

  Future<void> _onDeleteDiscount(
    DeleteDiscount event,
    Emitter<DiscountState> emit,
  ) async {
    emit(DiscountLoading());
    try {
      final discount = await discountRepository.getDiscountById(event.discountId);
      if (discount != null) {
        await discountRepository.deleteDiscount(event.discountId);
        
        // Reload discounts
        final discounts = await discountRepository.getDiscountsByVendor(discount.vendorId);
        emit(DiscountLoaded(discounts: discounts));
      } else {
        emit(DiscountError(message: 'Discount not found'));
      }
    } catch (e) {
      emit(DiscountError(message: 'Failed to delete discount: ${e.toString()}'));
    }
  }

  Future<void> _onToggleDiscountStatus(
    ToggleDiscountStatus event,
    Emitter<DiscountState> emit,
  ) async {
    emit(DiscountLoading());
    try {
      final discount = await discountRepository.getDiscountById(event.discountId);
      if (discount != null) {
        final updatedDiscount = discount.copyWith(isActive: event.isActive);
        await discountRepository.updateDiscount(updatedDiscount);
        
        // Reload discounts
        final discounts = await discountRepository.getDiscountsByVendor(discount.vendorId);
        emit(DiscountLoaded(discounts: discounts));
      } else {
        emit(DiscountError(message: 'Discount not found'));
      }
    } catch (e) {
      emit(DiscountError(message: 'Failed to toggle discount status: ${e.toString()}'));
    }
  }
}
